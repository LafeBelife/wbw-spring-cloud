<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>cn.wbw</groupId>
    <artifactId>wbw-spring-cloud</artifactId>
    <version>1.0-SNAPSHOT</version>

    <!--
       打包方式，项目的打包类型：pom、jar、war
       packing默认是jar类型，
           <packaging>pom</packaging>      父类型都为pom类型
           <<packaging>jar</packaging>     内部调用或者是作服务使用，通常单个springboot 都会打此包
           <<packaging>war</packaging>     需要部署的项目
   -->
    <packaging>pom</packaging>
    <name>wbw-spring-cloud</name>
    <description>spring cloud 父级工程，maven 管理</description>

    <!-- SpringBoot 依赖 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.3.RELEASE</version>
        <relativePath/>
    </parent>

    <!-- 下级模块管理 -->
    <modules>
        <module>eureka-server</module>
        <module>eureka-service-hi</module>
        <module>ribbon-service</module>
        <module>zuul-service</module>
        <module>feign-service</module>
        <module>config-client</module>
        <module>config-server</module>
    </modules>

    <properties>
        <!-- 项目 jdk 环境 及 项目编码统一 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <!-- 版本定义，集中管理 -->
        <spring-cloud.version>Finchley.RELEASE</spring-cloud.version>
    </properties>

    <!--
        dependencyManagement的作用其实相当于一个对所依赖jar包进行版本管理的管理器pom.xml文件中，
    jar的版本判断的两种途径
          1：如果dependencies里的dependency自己没有声明version元素，那么maven就
        会倒dependencyManagement里面去找有没有对该artifactId和groupId进行过版本声明，如果有，就继承它，如果
        没有就会报错，告诉你必须为dependency声明一个version
          2：如果dependencies中的dependency声明了version，
        那么无论dependencyManagement中有无对该jar的version声明，都以dependency里的version为准。
         -->
    <dependencyManagement>
        <dependencies>
            <!-- SpringCloud 核心依赖-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- 测试环境所需依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--
                Spring Boot的Maven插件（Spring Boot Maven plugin）能够以Maven的方式为应用提供Spring Boot的支持，
             即为Spring Boot应用提供了执行Maven操作的可能。
                Spring Boot Maven plugin能够将Spring Boot应用打包为可执行的jar或war文件，
             然后以通常的方式运行Spring Boot应用。
           -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>